-- sample data with BETOS and AAPC mappings + PAL
with sample_data as (
SELECT a.*
-- , c.pal as Excellus_PAL
, a.pal_category as PAL_mapping
, b.short_description as AAPC_short_desc
, b.section1 as AAPC_section1
, b.section2 as AAPC_section2
, d.rbcs_id
, d.rbcs_cat_desc
, d.rbcs_subcat_desc
, d.rbcs_family_desc
, d.rbcs_major_ind
, (case when a.dsc_with_hierarchy in ('Home Health', 'SNF') then a.dsc_with_hierarchy else 'Non PACT' end )as PACT_FLAG
FROM "testdb"."vt_sample_claimants_75kmbrs_add_utilcounting" a
left join "reference_library"."aapc_cpt_hcpcs_grouping" b
on a.procedure_code = b.code
-- left join testdb.vt_sample_excellusPAL  c

left join "testdb"."servicemapping_betos" d
on a.procedure_code = d.procedure_code
order by a.member_ssn, a.service_from_date),


triggers_plus_shells as (
select * from  "testdb"."vt_sample_claimants_75kmbrs_Enc_TriggerShells" ),


/******************************* Assignment**************************/
-- select primary triggers
-- primary triggers - still need one more level of deduping after this to get rid of encoutner keys in OP billed with same proc code
Primary_triggers as (
select * 
from triggers_plus_shells
where trigger_key_no_hierarchy = trigger_key_primary
order by encounter_key),


-- helper tables
-- relevant primary and secondary Dxs to the primary trigger entries; will determine relevenacy by 1st 3 bytes of the the Dx code
relevant_Dxs as (
  select encounter_key
  , substring(trigger_code_Dx1,1,3) as Dx_group
  from triggers_plus_shells

  UNION ALL
  
  select encounter_key
    , substring(trigger_code_Dx2,1,3) as Dx_group
    from triggers_plus_shells

 ),
 
 relevant_Dx_array as (
select encounter_key
, array_join(array_agg(Dx_group), ',', 'NULL') as relevant_Dx_array
from (
 select * 
 from relevant_Dxs  
 group by 1,2)
 group by encounter_key),


-- Table to help identify records for carve out, if multiple PALs happen within same encounter
-- Not Used at the moment, discuss whether to add

carve_out_records as (
select encounter_key
, trigger_key_primary
-- update unique key to ungrouped?
, unique_key
from Primary_triggers
where rank_PAL_enc_key > 1),


-- add relevant Dxs to primary triggers Table
add_relevant_dxs as (
  select a.* 
  , b.relevant_Dx_array
  from Primary_triggers a
  left join relevant_Dx_array b
  on a.encounter_key = b.encounter_key),


   
/************** Assignment to Shells **************/  
-- assignment to M rbcs categories, no carve out
M_assignment_nocarve as (
select a.* 
, (case when a.rank_PAL_enc_key = 1 then sum(b.allowed_amount) 
   else NULL end) as enc_cost_no_carveout
from add_relevant_dxs a
left join sample_data b
on a.member_ssn = b.member_ssn 
and (b.service_from_date between a.shell_start and a.shell_end)
and a.PACT_FLAG = b.PACT_FLAG
where a.rbcs_major_ind = 'M'
  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30),

-- assigment for O rbcs categories, requires same Dx family
O_assignment_nocarve as (
select a.* 
, (case when a.rank_PAL_enc_key = 1 then sum(b.allowed_amount) 
   else NULL end) as enc_cost_no_carveout
from add_relevant_dxs a
left join sample_data b
on a.member_ssn = b.member_ssn 
and (b.service_from_date between a.shell_start and a.shell_end)
and a.PACT_FLAG = b.PACT_FLAG
and (a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code1,1,3)) ,'%')
     or a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code2,1,3)) ,'%'))
  
where a.rbcs_major_ind = 'O'
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30),


-- assigment for all others, requires same Dx family & provider TIN
AllOther_assignment_nocarve as (
select a.* 
, (case when a.rank_PAL_enc_key = 1 then sum(b.allowed_amount) 
   else NULL end) as enc_cost_no_carveout
from add_relevant_dxs a
left join sample_data b
on a.member_ssn = b.member_ssn 
and (b.service_from_date between a.shell_start and a.shell_end)
and a.PACT_FLAG = b.PACT_FLAG
and (a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code1,1,3)) ,'%')
     or a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code2,1,3)) ,'%'))
and a.provider_tin = b.provider_tin
where a.rbcs_major_ind not in( 'O', 'M')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30),


Merge_Tables as
(select * from M_assignment_nocarve

Union ALL 

select * from O_assignment_nocarve

UNION ALL

select * from AllOther_assignment_nocarve),

-- final dedup for procs bill OP under same proc code
dedup_encounters as (
select * from (
select a.*
, row_number() over (partition by encounter_key, shell_start, shell_end, rank_pal_enc_key order by allowed desc) dedup_enc_allowed
from Merge_Tables a)
where dedup_enc_allowed = 1),

rbcs_procedure_cateogry_ranking as (
select *
, row_number() over (partition by encounter_key order by allowed_from_claims desc) as rank_rbcs_procedure_cat
from(
select a.encounter_key
, a.member_ssn 
, a.rbcs_cat_desc as enctable_rbcs_cat
, a.rbcs_subcat_desc as enctable_rbcs_subcat
, b.rbcs_cat_desc as claimstable_rbcs_cat
, b.rbcs_subcat_desc as claimstable_rbcs_subcat
, sum(b.allowed_amount) as allowed_from_claims
from dedup_encounters a
inner join sample_data b
on a.member_ssn = b.member_ssn
and (b.service_from_date between a.shell_start and a.shell_end) 
where b.rbcs_cat_desc is not NULL
and a.rbcs_cat_desc = 'Procedure'
and b.rbcs_cat_desc = 'Procedure'
and a.rank_pal_enc_key = 1      
group by 1,2,3,4,5,6)),

-- create temp table to flag rbcs procedure category conflict
flag_rbcs_proc_cat_conflict as (
select encounter_key
from rbcs_procedure_cateogry_ranking 
where rank_rbcs_procedure_cat = 1
and enctable_rbcs_subcat != claimstable_rbcs_subcat),


/********************* Xwalk from Enc to Claims Table ********************/

-- assignment to M rbcs categories, no carve out
M_assignment_nocarve_Xwalk as (
select a.encounter_key 
, a.member_ssn
, (case when a.rank_PAL_enc_key = 1 then b.unique_key
   else NULL end) as unique_key_xwalk
, (case when a.rank_PAL_enc_key = 1 then a.rbcs_major_ind
   else NULL end) rbcs_major_ind
from dedup_encounters a
left join sample_data b
on a.member_ssn = b.member_ssn 
and (b.service_from_date between a.shell_start and a.shell_end)
and a.PACT_FLAG = b.PACT_FLAG
where a.rbcs_major_ind = 'M'
  group by 1,2,3,4),

-- assigment for O rbcs categories, requires same Dx family
O_assignment_nocarve_Xwalk as (
select a.encounter_key
, a.member_ssn
, (case when a.rank_PAL_enc_key = 1 then b.unique_key_ungrouped
   else NULL end) as unique_key_xwalk
, (case when a.rank_PAL_enc_key = 1 then a.rbcs_major_ind
   else NULL end) rbcs_major_ind
from dedup_encounters a
left join sample_data b
on a.member_ssn = b.member_ssn 
and (b.service_from_date between a.shell_start and a.shell_end)
and a.PACT_FLAG = b.PACT_FLAG
and (a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code1,1,3)) ,'%')
     or a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code2,1,3)) ,'%'))
  
where a.rbcs_major_ind = 'O'
    group by 1,2,3,4),


-- assigment for all others, requires same Dx family & provider TIN
AllOther_assignment_nocarve_Xwalk as (
select a.encounter_key 
, a.member_ssn
, (case when a.rank_PAL_enc_key = 1 then b.unique_key_ungrouped
   else NULL end) as unique_key_xwalk
, (case when a.rank_PAL_enc_key = 1 then a.rbcs_major_ind
   else NULL end) rbcs_major_ind
from dedup_encounters a
left join sample_data b
on a.member_ssn = b.member_ssn 
and (b.service_from_date between a.shell_start and a.shell_end)
and a.PACT_FLAG = b.PACT_FLAG
and (a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code1,1,3)) ,'%')
     or a.relevant_Dx_array LIKE  concat('%', trim(substring(b.diagnosis_code2,1,3)) ,'%'))
and a.provider_tin = b.provider_tin
where a.rbcs_major_ind not in( 'O', 'M')
    group by 1,2,3,4),

-- final Xwalk Table
Merge_Xwalk_Tables as
(select * from M_assignment_nocarve_Xwalk

Union ALL 

select * from O_assignment_nocarve_Xwalk

UNION ALL

select * from AllOther_assignment_nocarve_Xwalk),


XWalk_to_Claims as (
select * 
from Merge_Xwalk_Tables 
group by 1,2,3,4),


/********************* Flags ********************/
-- Stochastic event (stochastic event definition from SBA); if primary trigger has stochastic event flag for exclusion
stochastic_event as(
select encounter_key 
, (case 
   when trigger_code_dx1 between 'S00' and 'S99' then 1
   when trigger_code_dx1 between 'T00' and 'T88' then 1
   when trigger_code_dx2 between 'S00' and 'S99' then 1
   when trigger_code_dx2 between 'T00' and 'T88' then 1 
   else 0 end) as stochastic_event_flag
from dedup_encounters
where rank_pal_enc_key = 1),

add_stochastic_event_flag as (
select a.*
, (case 
   when encounter_key in (select encounter_key from stochastic_event where stochastic_event_flag = 1) then 1 
   else 0 end) as stocahstic_event_flag
from dedup_encounters a),

-- ER event; if there is an ER admit on the same day as the beginning of the trigger event, flag for exclusion
Identify_ER as (
select distinct a.encounter_key
from add_stochastic_event_flag a
inner join sample_data b
on a.member_ssn = b.member_ssn
and a.shell_start = b.service_from_date
where (b.pos = '23' or b.dsc_with_hierarchy LIKE  '%Emergency Room%') 
),

Add_ER_Flag as (
select a.*
, (case 
   when encounter_key in (select encounter_key from Identify_ER) then 1 
   else 0 end) as  ER_flag
from add_stochastic_event_flag a),

fix_rbcs_proc_cat_conflict as (
select * 
  , (case 
     when rank_pal_enc_key > 1 then NULL
     when (rank_pal_enc_key = 1 and encounter_key in (select * from flag_rbcs_proc_cat_conflict)) then allowed
     else enc_cost_no_carveout end) as final_enc_cost           
from Add_ER_Flag),

/************PACT flags***********/ 

-- Acute IP stay identification
IP_Acute_Identification as(
  select member_ssn
  ,service_from_date
  ,major_service_category
  ,dsc_with_hierarchy
  from  sample_data
  where dsc_with_hierarchy not in( 'Hospice', 'SNF')
  and major_service_category not in ('Outpatient Facility', 'Professional Services')
  group by 1,2,3,4),


-- Add acute IP flag; confirms whether acute IP facility claims were incurred during the encouter
Acute_IP_flag as (
select *
, (case when encounter_key in 
(   select a.encounter_key
 from fix_rbcs_proc_cat_conflict a
 inner join IP_Acute_Identification b
 on (b.service_from_date between a.shell_start and a.shell_end)
 and a.member_ssn = b.member_ssn

 where a.rbcs_cat_desc = 'Procedure'
 and a.final_enc_cost = a.enc_cost_no_carveout
 and a.rank_pal_enc_key = 1
 and a.pact_flag = 'Non PACT') then 1 
   else 0 end) as Acute_IP_Flag

from fix_rbcs_proc_cat_conflict ),

-- clean up the pos_type field. Sometimes a provider bills as OP when there is clearly an IP stay happening alongside, and vice versa
-- Identify encounter_keys for cleanup

fix_pos_type as(
select encounter_key
, (case 
   when (acute_IP_flag = 1 and pos_type = 'OP') then 'IP'
   when (acute_IP_flag = 0 and pos_type = 'IP') then 'OP'
   else pos_type end) as fix_pos_type
from acute_IP_flag 
where rank_pal_enc_key = 1
and final_enc_cost = enc_cost_no_carveout
and pact_flag = 'Non PACT'
and rbcs_major_ind in ('M')
group by 1,2),

  
  final_pos_type as (
  select *
  , (case when (acute_IP_flag = 1 
                and pos_type = 'OP' 
                and final_enc_cost = enc_cost_no_carveout 
                and  pact_flag = 'Non PACT' 
                and rbcs_major_ind in ('M')) then 'IP'
     when (acute_IP_flag = 0 
                and pos_type = 'IP' 
                and final_enc_cost = enc_cost_no_carveout 
                and  pact_flag = 'Non PACT' 
                and rbcs_major_ind in ('M')) then 'OP'
     else pos_type end) as final_pos_type
  from acute_IP_flag)

